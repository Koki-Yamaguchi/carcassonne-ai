#[derive(Debug, Copy, Clone)]
pub enum Tile {
  StartingTile,
  CityCapWithCrossroad,
  Monastery,
  MonasteryWithRoad,
  TriangleWithRoad,
  TriangleWithRoadWithCOA,
  Straight,
  CityCap,
  Separator,
  TripleRoad,
  Invalid,
  Curve,
  QuadrupleRoad,
  Connector,
  ConnectorWithCOA,
  Left,
  Right,
  TripleCity,
  TripleCityWithCOA,
  VerticalSeparator,
  TripleCityWithRoad,
  TripleCityWithRoadWithCOA,
}

impl Tile {
  pub fn to_id(self) -> i32 {
    match self {
      Tile::StartingTile => 0,
      Tile::Monastery => 1,
      Tile::MonasteryWithRoad => 2,
      Tile::CityCapWithCrossroad => 3,
      Tile::TriangleWithRoad => 4,
      Tile::TriangleWithRoadWithCOA => 5,
      Tile::Straight => 6,
      Tile::CityCap => 7,
      Tile::Separator => 8,
      Tile::TripleRoad => 9,
      Tile::Curve => 10,
      Tile::QuadrupleRoad => 11,
      Tile::Connector => 12,
      Tile::ConnectorWithCOA => 13,
      Tile::Left => 14,
      Tile::Right => 15,
      Tile::TripleCity => 16,
      Tile::TripleCityWithCOA => 17,
      Tile::VerticalSeparator => 18,
      Tile::TripleCityWithRoad => 19,
      Tile::TripleCityWithRoadWithCOA => 20,
      Tile::Invalid => -1,
    }
  }
}

pub fn to_tile(id: i32) -> Tile {
  match id {
    0 => Tile::StartingTile,
    1 => Tile::Monastery,
    2 => Tile::MonasteryWithRoad,
    3 => Tile::CityCapWithCrossroad,
    4 => Tile::TriangleWithRoad,
    5 => Tile::TriangleWithRoadWithCOA,
    6 => Tile::Straight,
    7 => Tile::CityCap,
    8 => Tile::Separator,
    9 => Tile::TripleRoad,
    10 => Tile::Curve,
    11 => Tile::QuadrupleRoad,
    12 => Tile::Connector,
    13 => Tile::ConnectorWithCOA,
    14 => Tile::Left,
    15 => Tile::Right,
    16 => Tile::TripleCity,
    17 => Tile::TripleCityWithCOA,
    18 => Tile::VerticalSeparator,
    19 => Tile::TripleCityWithRoad,
    20 => Tile::TripleCityWithRoadWithCOA,
    _ => Tile::Invalid,
  }
}
